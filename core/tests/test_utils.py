from django.db import connection, models

from core.tests.testcases import IntegrationTestCase, UnitTestCase
from core.utils import BiggerIntField, ChoiceEnum


class TestEnum(ChoiceEnum):
    A = "choice a"
    B = "choice b"


class ChoiceEnumTest(UnitTestCase):
    def test_as_choices(self):
        self.assertEqual(TestEnum.as_choices(), [("A", "choice a"), ("B", "choice b")])
        self.assertEqual(TestEnum.as_choices(reverse=True), [("choice a", "A"), ("choice b", "B")])

    def test_as_dict(self):
        self.assertEqual(TestEnum.as_dict(), {"A": "choice a", "B": "choice b"})

    def test_names(self):
        self.assertEqual(TestEnum.names(), ["A", "B"])

    def test_lower_names(self):
        self.assertEqual(TestEnum.lower_names(), ["a", "b"])

    def test_values(self):
        self.assertEqual(TestEnum.values(), ["choice a", "choice b"])

    def test_value_from_name(self):
        self.assertEqual(TestEnum.value_from_name("A"), "choice a")
        self.assertEqual(TestEnum.value_from_name("B"), "choice b")
        self.assertEqual(TestEnum.value_from_name("C"), None)

    def test_from_name(self):
        self.assertEqual(TestEnum.from_name(TestEnum.A), TestEnum.A)
        self.assertEqual(TestEnum.from_name(TestEnum.B), TestEnum.B)
        self.assertEqual(TestEnum.from_name("A"), TestEnum.A)
        self.assertEqual(TestEnum.from_name("B"), TestEnum.B)
        self.assertEqual(TestEnum.from_name("C"), None)

    def test___str__(self):
        self.assertEqual(str(TestEnum.A), "A")
        self.assertEqual(str(TestEnum.B), "B")

    def test___repr__(self):
        self.assertEqual(TestEnum.A.__repr__(), "A")
        self.assertEqual(TestEnum.B.__repr__(), "B")

    def test___eq__(self):
        self.assertTrue(TestEnum.A == TestEnum.A)
        self.assertTrue(TestEnum.B == TestEnum.B)
        self.assertFalse(TestEnum.A == TestEnum.B)

    def test___hash__(self):
        self.assertEqual(hash(TestEnum.A), hash("A"))
        self.assertEqual(hash(TestEnum.B), hash("B"))


class BiggerIntModel(models.Model):
    big_number = BiggerIntField()


class BiggerIntFieldTest(IntegrationTestCase):
    def setUp(self):
        with connection.cursor() as cursor:
            cursor.execute(
                "create table if not exists core_biggerintmodel"
                ' ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, '
                '"big_number" varchar(1024));'
            )

    def tearDown(self):
        with connection.cursor() as cursor:
            cursor.execute("drop table if exists core_biggerintmodel;")

    def test_big_number(self):
        big_number = 1234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569  # noqa
        test_model = BiggerIntModel.objects.create(big_number=big_number)
        self.assertEqual(test_model.big_number, big_number)
        test_model.refresh_from_db()
        test_model.big_number += 1
        test_model.save()
        test_model.refresh_from_db()
        self.assertEqual(test_model.big_number, big_number + 1)

    def test_big_str_number(self):
        big_number = "1234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569123456912345691234569"  # noqa
        test_model = BiggerIntModel.objects.create(big_number=big_number)
        self.assertEqual(test_model.big_number, big_number)
        test_model.refresh_from_db()
        test_model.big_number -= 1
        test_model.save()
        test_model.refresh_from_db()
        self.assertEqual(test_model.big_number, int(big_number) - 1)
